{
  "_args": [
    [
      {
        "raw": "react-waypoint@7.0.1",
        "scope": null,
        "escapedName": "react-waypoint",
        "name": "react-waypoint",
        "rawSpec": "7.0.1",
        "spec": "7.0.1",
        "type": "version"
      },
      "/Users/ma/CODE/Madek/webapp"
    ]
  ],
  "_from": "react-waypoint@7.0.1",
  "_id": "react-waypoint@7.0.1",
  "_inCache": true,
  "_location": "/react-waypoint",
  "_nodeVersion": "6.2.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/react-waypoint-7.0.1.tgz_1494441244916_0.7328357337974012"
  },
  "_npmUser": {
    "name": "lencioni",
    "email": "joe.lencioni@gmail.com"
  },
  "_npmVersion": "3.9.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-waypoint@7.0.1",
    "scope": null,
    "escapedName": "react-waypoint",
    "name": "react-waypoint",
    "rawSpec": "7.0.1",
    "spec": "7.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-waypoint/-/react-waypoint-7.0.1.tgz",
  "_shasum": "6eae48f4e6d9b5c1d643a0333f8e7fc36b09973a",
  "_shrinkwrap": null,
  "_spec": "react-waypoint@7.0.1",
  "_where": "/Users/ma/CODE/Madek/webapp",
  "author": {
    "name": "Brigade Engineering"
  },
  "bugs": {
    "url": "https://github.com/brigade/react-waypoint/issues"
  },
  "dependencies": {
    "consolidated-events": "^1.0.1",
    "prop-types": "^15.0.0"
  },
  "description": "A React component to execute a function whenever you scroll to an element.",
  "devDependencies": {
    "@types/react": "^15.0.21",
    "babel-cli": "^6.23.0",
    "babel-core": "^6.23.1",
    "babel-loader": "^6.4.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-transform-react-jsx": "^6.23.0",
    "babel-preset-es2015": "^6.22.0",
    "eslint": "^3.17.1",
    "eslint-config-brigade": "^3.2.1",
    "eslint-plugin-react": "^6.10.0",
    "in-publish": "^2.0.0",
    "jasmine-core": "^2.1.3",
    "karma": "^1.5.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-cli": "^1.0.1",
    "karma-firefox-launcher": "^1.0.1",
    "karma-jasmine": "^1.1.0",
    "karma-webpack": "^2.0.3",
    "react": "^15.5.3",
    "react-dom": "^15.5.3",
    "rimraf": "^2.6.1",
    "safe-publish-latest": "^1.1.1",
    "webpack": "^2.3.3"
  },
  "directories": {},
  "dist": {
    "shasum": "6eae48f4e6d9b5c1d643a0333f8e7fc36b09973a",
    "tarball": "https://registry.npmjs.org/react-waypoint/-/react-waypoint-7.0.1.tgz"
  },
  "gitHead": "0ca607e4a5d4773de1b7312cf35d927caac6df13",
  "homepage": "https://github.com/brigade/react-waypoint",
  "keywords": [
    "react",
    "component",
    "react-component",
    "scroll",
    "onscroll"
  ],
  "license": "MIT",
  "main": "build/waypoint.js",
  "maintainers": [
    {
      "name": "brigade",
      "email": "services+npm@brigade.com"
    },
    {
      "name": "jmeas",
      "email": "jellyes2@gmail.com"
    },
    {
      "name": "lencioni",
      "email": "joe.lencioni@gmail.com"
    },
    {
      "name": "trotzig",
      "email": "henric.trotzig@gmail.com"
    }
  ],
  "name": "react-waypoint",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.9 || ^15.0.0"
  },
  "readme": "# React Waypoint\n\n[![npm version](https://badge.fury.io/js/react-waypoint.svg)](http://badge.fury.io/js/react-waypoint)\n[![Build Status](https://travis-ci.org/brigade/react-waypoint.svg?branch=master)](https://travis-ci.org/brigade/react-waypoint)\n\nA React component to execute a function whenever you scroll to an element. Works\nin all containers that can scroll, including the window.\n\nReact Waypoint can be used to build features like lazy loading content, infinite\nscroll, scrollspies, or docking elements to the viewport on scroll.\n\nInspired by [Waypoints][waypoints], except this little library grooves the\n[React][react] way.\n\n## Demo\n![Demo of React Waypoint in action](https://raw.github.com/brigade/react-waypoint/master/react-waypoint-demo.gif)\n\n[View demo page][demo-page]\n\n[waypoints]: https://github.com/imakewebthings/waypoints\n[react]: https://github.com/facebook/react\n[demo-page]: http://brigade.github.io/react-waypoint/\n\n## Installation\n\n### npm\n\n```bash\nnpm install react-waypoint --save\n```\n\n### yarn\n\n```bash\nyarn add react-waypoint\n```\n\n## Usage\n\n```jsx\nvar Waypoint = require('react-waypoint');\n```\n\n```jsx\n<Waypoint\n  onEnter={this._handleWaypointEnter}\n  onLeave={this._handleWaypointLeave}\n/>\n```\n\nA waypoint normally fires `onEnter` and `onLeave` as you are scrolling, but it\ncan fire because of other events too:\n\n- When the window is resized\n- When it is mounted (fires `onEnter` if it's visible on the page)\n- When it is updated/re-rendered by its parent\n\nCallbacks will only fire if the new position changed from the last known\nposition. Sometimes it's useful to have a waypoint that fires `onEnter` every\ntime it is updated as long as it stays visible (e.g. for infinite scroll). You\ncan then use a `key` prop to control when a waypoint is reused vs. re-created.\n\n```jsx\n<Waypoint\n  key={cursor}\n  onEnter={this._loadMoreContent}\n/>\n```\n\nAlternatively, you can also use an `onPositionChange` event to just get\nnotified when the waypoint's position (e.g. inside the viewport, above or\nbelow) has changed.\n\n```jsx\n<Waypoint\n  onPositionChange={this._handlePositionChange}\n/>\n```\n\nWaypoints can take a child, allowing you to track when a section of content\nenters or leaves the viewport. For details, see [Children](#children), below.\n\n```jsx\n<Waypoint onEnter={this._handleEnter}>\n  <div>\n    Some content here\n  </div>\n</Waypoint>\n```\n\n### Example: [JSFiddle Example][jsfiddle-example]\n\n[jsfiddle-example]: http://jsfiddle.net/L4z5wcx0/7/\n\n## Prop types\n\n```jsx\n  propTypes: {\n\n    /**\n     * Function called when waypoint enters viewport\n     */\n    onEnter: PropTypes.func,\n\n    /**\n     * Function called when waypoint leaves viewport\n     */\n    onLeave: PropTypes.func,\n\n    /**\n     * Function called when waypoint position changes\n     */\n    onPositionChange: PropTypes.func,\n\n    /**\n     * Whether to activate on horizontal scrolling instead of vertical\n     */\n    horizontal: PropTypes.bool,\n\n    /**\n     * `topOffset` can either be a number, in which case its a distance from the\n     * top of the container in pixels, or a string value. Valid string values are\n     * of the form \"20px\", which is parsed as pixels, or \"20%\", which is parsed\n     * as a percentage of the height of the containing element.\n     * For instance, if you pass \"-20%\", and the containing element is 100px tall,\n     * then the waypoint will be triggered when it has been scrolled 20px beyond\n     * the top of the containing element.\n     */\n    topOffset: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n\n    /**\n     * `bottomOffset` is like `topOffset`, but for the bottom of the container.\n     */\n    bottomOffset: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n\n    /**\n     * Scrollable Ancestor - A custom ancestor to determine if the\n     * target is visible in it. This is useful in cases where\n     * you do not want the immediate scrollable ancestor to be\n     * the container. For example, when your target is in a div\n     * that has overflow auto but you are detecting onEnter based\n     * on the window.\n     *\n     * This should typically be a reference to a DOM node, but it will also work\n     * to pass it the string \"window\" if you are using server rendering.\n     */\n    scrollableAncestor: PropTypes.any,\n\n    /**\n     * fireOnRapidScroll - if the onEnter/onLeave events are to be fired\n     * on rapid scrolling. This has no effect on onPositionChange -- it will\n     * fire anyway.\n     */\n    fireOnRapidScroll: PropTypes.bool,\n\n    /**\n     * Use this prop to get debug information in the console log. This slows\n     * things down significantly, so it should only be used during development.\n     */\n    debug: PropTypes.bool,\n  },\n```\n\nAll callbacks (`onEnter`/`onLeave`/`onPositionChange`) receive an object as the\nonly argument. That object has the following properties:\n\n- `currentPosition` - the position that the waypoint has at the moment. One\n  of `Waypoint.below`, `Waypoint.above`, `Waypoint.inside`,\n  and `Waypoint.invisible`.\n- `previousPosition` - the position that the waypoint had before. Also one\n  of `Waypoint.below`, `Waypoint.above`, `Waypoint.inside`,\n  and `Waypoint.invisible`.\n\nIn most cases, the above two properties should be enough. In some cases\nthough, you might find these additional properties useful:\n\n- `event` - the native [scroll\n  event](https://developer.mozilla.org/en-US/docs/Web/Events/scroll) that\n  triggered the callback. May be missing if the callback wasn't triggered\n  as the result of a scroll.\n- `waypointTop` - the waypoint's distance to the top of the viewport.\n- `viewportTop` - the distance from the scrollable ancestor to the\n  viewport top.\n- `viewportBottom` - the distance from the bottom of the scrollable\n  ancestor to the viewport top.\n\nIf you use [es6 object\ndestructuring](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment),\nthis means that you can use waypoints in the following way:\n\n```jsx\n<Waypoint onEnter={({ previousPosition, currentPosition, event }) => {\n    // do something useful!\n  }}\n/>\n```\n\nIf you are more familiar with plain old js functions, you'll do something like\nthis:\n\n```jsx\n<Waypoint onEnter={function(props) {\n    // here you can use `props.currentPosition`, `props.previousPosition`, and\n    // `props.event`\n  }}\n/>\n```\n\n## Offsets and Boundaries\n\nTwo of the Waypoint props are `topOffset` and `bottomOffset`. To appreciate\nwhat these can do for you, it will help to have an understanding of the\n\"boundaries\" used by this library. The boundaries of React Waypoint are the top\nand bottom of the element containing your scrollable content ([although this element\ncan be configured](#containing-elements-and-scrollableancestor)). When a\nwaypoint is within these boundaries, it is considered to be \"inside.\" When a\nwaypoint passes beyond these boundaries, then it is \"outside.\" The `onEnter` and\n`onLeave` props are called as an element transitions from being inside to\noutside, or vice versa.\n\nThe `topOffset` and `bottomOffset` properties can adjust the placement of these\nboundaries. By default, the offset is `'0px'`. If you specify a positive value,\nthen the boundaries will be pushed inward, toward the center of the page. If\nyou specify a negative value for an offset, then the boundary will be pushed\noutward from the center of the page.\n\nHere is an illustration of offsets and boundaries. The black box is the\n[`scrollableAncestor`](#containing-elements-and-scrollableancestor). The pink\nlines represent the location of the boundaries. The offsets that determine\nthe boundaries are in light pink.\n\n![](https://cloud.githubusercontent.com/assets/2322305/16939123/5be12454-4d33-11e6-86b6-ad431da93bf2.png)\n\n#### Horizontal Scrolling Offsets and Boundaries\n\nBy default, waypoints listen to vertical scrolling. If you want to switch to\nhorizontal scrolling instead, use the `horizontal` prop. For simplicity's sake,\nall other props and callbacks do not change. Instead, `topOffset` and\n`bottomOffset` (among other directional variables) will mean the offset from\nthe left and the offset from the right, respectively, and work exactly as they\ndid before, just calculated in the horizontal direction.\n\n#### Example Usage\n\nPositive values of the offset props are useful when you have an element that\noverlays your scrollable area. For instance, if your app has a `50px` fixed\nheader, then you may want to specify `topOffset='50px'`, so that the\n`onEnter` callback is called when waypoints scroll into view from beneath the\nheader.\n\nNegative values of the offset prop could be useful for lazy loading. Imagine if\nyou had a lot of large images on a long page, but you didn't want to load them\nall at once. You can use React Waypoint to receive a callback whenever an image\nis a certain distance from the bottom of the page. For instance, by specifying\n`bottomOffset='-200px'`, then your `onEnter` callback would be called when\nthe waypoint comes closer than 200 pixels from the bottom edge of the page. By\nplacing a waypoint near each image, you could dynamically load them.\n\nThere are likely many more use cases for the offsets: be creative! Also, keep in\nmind that there are _two_ boundaries, so there are always _two_ positions when\nthe `onLeave` and `onEnter` callback will be called. By using the arguments\npassed to the callbacks, you can determine whether the waypoint has crossed the\ntop boundary or the bottom boundary.\n\n## Children\n\nIf you don't pass a child into your Waypoint, then you can think of the\nwaypoint as a line across the page. Whenever that line crosses a\n[boundary](#offsets-and-boundaries), then the `onEnter` or `onLeave` callbacks\nwill be called.\n\nIf you do pass a child, it must be a single DOM Element (eg; a `<div>`)\nand *not* a Component Element (eg; `<MyComponent />`).\n\nThe `onEnter` callback will be called when *any* part of the child is visible\nin the viewport. The `onLeave` callback will be called when *all* of the child\nhas exited the viewport.\n\n(Note that this is measured only on a single axis. What this means is that for a\nWaypoint within a vertically scrolling parent, it could be off of the screen\nhorizontally yet still fire an onEnter event, because it is within the vertical\nboundaries).\n\nDeciding whether to pass a child or not will depend on your use case. One\nexample of when passing a child is useful is for a scrollspy\n(like [Bootstrap's](https://bootstrapdocs.com/v3.3.6/docs/javascript/#scrollspy)).\nImagine if you want to fire a waypoint when a particularly long piece of content\nis visible onscreen. When the page loads, it is conceivable that both the top\nand bottom of this piece of content could lie outside of the boundaries,\nbecause the content is taller than the viewport. If you didn't pass a child,\nand instead put the waypoint above or below the content, then you will not\nreceive an `onEnter` callback (nor any other callback from this library).\nInstead, passing this long content as a child of the Waypoint would fire the `onEnter`\ncallback when the page loads.\n\n## Containing elements and `scrollableAncestor`\n\nReact Waypoint positions its [boundaries](#offsets-and-boundaries) based on the\nfirst scrollable ancestor of the Waypoint.\n\nIf that algorithm doesn't work for your use case, then you might find the\n`scrollableAncestor` prop useful. It allows you to specify what the scrollable\nancestor is. Pass a reference to a DOM node as that prop, and the Waypoint will\nuse the scroll position of *that* node, rather than its first scrollable\nancestor.\n\nThis can also be the string \"window\", which can be useful if you are using\nserver rendering.\n\n#### Example Usage\n\nSometimes, waypoints that are deeply nested in the DOM tree may need to track\nthe scroll position of the page as a whole. If you want to be sure that no other\nscrollable ancestor is used (since, once again, the first scrollable ancestor is\nwhat the library will use by default), then you can explicitly set the\n`scrollableAncestor` to be the `window` to ensure that no other element is used.\n\nThis might look something like:\n\n```jsx\n<Waypoint\n  scrollableAncestor={window}\n  onEnter={this._handleWaypointEnter}\n  onLeave={this._handleWaypointLeave}\n/>\n```\n\n## Troubleshooting\n\nIf your waypoint isn't working the way you expect it to, there are a few ways\nyou can debug your setup.\n\nOPTION 1: Add the `debug={true}` prop to your waypoint. When you do, you'll see console\nlogs informing you about the internals of the waypoint.\n\nOPTION 2: Clone and modify the project locally.\n- clone this repo\n- add `console.log` or breakpoints where you think it would be useful.\n- `npm link` in the react-waypoint repo.\n- `npm link react-waypoint` in your project.\n- if needed rebuild react-waypoint module: `npm run build-npm`\n\n## Limitations\n\nIn this component we make a few assumptions that we believe are generally safe,\nbut in some situations might present limitations.\n\n- We determine the scrollable-ness of a node by inspecting its computed\n  overflow-y or overflow property and nothing else. This could mean that a\n  container with this style that does not actually currently scroll will be\n  considered when performing visibility calculations.\n- We assume that waypoints are rendered within at most one scrollable container.\n  If you render a waypoint in multiple nested scrollable containers, the\n  visibility calculations will likely not be accurate.\n- We also base the visibility calculations on the scroll position of the\n  scrollable container (or `window` if no scrollable container is found). This\n  means that if your scrollable container has a height that is greater than the\n  window, it might trigger `onEnter` unexpectedly.\n\n## In the wild\n\n[Organizations and projects using `react-waypoint`](INTHEWILD.md).\n\n## Credits\n\nCredit to [trotzig][trotzig-github] and [lencioni][lencioni-github] for writing\nthis component, and [Brigade][brigade-home] for open sourcing it.\n\nThanks to the creator of the original Waypoints library,\n[imakewebthings][imakewebthings-github].\n\n[lencioni-github]: https://github.com/lencioni\n[trotzig-github]: https://github.com/trotzig\n[brigade-home]: https://www.brigade.com/\n[imakewebthings-github]: https://github.com/imakewebthings\n\n## License\n\n[MIT][mit-license]\n\n[mit-license]: ./LICENSE\n\n---\n\n_Make sure to check out other popular open-source tools from\n[the Brigade team][brigade-github]: [overcommit] and [haml-lint].\n\n[brigade-github]: https://github.com/brigade\n[overcommit]: https://github.com/brigade/overcommit\n[haml-lint]: https://github.com/brigade/haml-lint\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/brigade/react-waypoint.git"
  },
  "scripts": {
    "build": "npm run clean && babel src/ -d build/",
    "check-changelog": "expr $(git status --porcelain 2>/dev/null| grep \"^\\s*M.*CHANGELOG.md\" | wc -l) >/dev/null || (echo 'Please edit CHANGELOG.md' && exit 1)",
    "check-only-changelog-changed": "(expr $(git status --porcelain 2>/dev/null| grep -v \"CHANGELOG.md\" | wc -l) >/dev/null && echo 'Only CHANGELOG.md may have uncommitted changes' && exit 1) || exit 0",
    "clean": "rimraf build",
    "lint": "eslint . --ext .js,.jsx",
    "performance-test:watch": "webpack --watch --config webpack.config.performance-test.js",
    "postversion": "git commit package.json CHANGELOG.md -m \"Version $npm_package_version\" && npm run tag && git push && git push --tags && npm publish",
    "prepublish": "in-publish && safe-publish-latest && npm run build || not-in-publish",
    "pretest": "npm run --silent lint",
    "preversion": "npm run test && npm run check-changelog && npm run check-only-changelog-changed",
    "tag": "git tag v$npm_package_version",
    "test": "npm run testonly",
    "testonly": "karma start --single-run",
    "testonly:watch": "karma start --no-single-run"
  },
  "types": "index.d.ts",
  "version": "7.0.1"
}
